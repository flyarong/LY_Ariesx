// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ApiReq struct {
	ReqName          *string `protobuf:"bytes,1,req,name=ReqName" json:"ReqName,omitempty"`
	Data             []byte  `protobuf:"bytes,2,req,name=Data" json:"Data,omitempty"`
	Flag             *int32  `protobuf:"varint,3,opt,name=Flag" json:"Flag,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApiReq) Reset()                    { *m = ApiReq{} }
func (m *ApiReq) String() string            { return proto.CompactTextString(m) }
func (*ApiReq) ProtoMessage()               {}
func (*ApiReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ApiReq) GetReqName() string {
	if m != nil && m.ReqName != nil {
		return *m.ReqName
	}
	return ""
}

func (m *ApiReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ApiReq) GetFlag() int32 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

type ApiAck struct {
	AckName          *string `protobuf:"bytes,1,req,name=AckName" json:"AckName,omitempty"`
	Data             []byte  `protobuf:"bytes,2,req,name=Data" json:"Data,omitempty"`
	Flag             *int32  `protobuf:"varint,3,opt,name=Flag" json:"Flag,omitempty"`
	Counter          *int32  `protobuf:"varint,4,opt,name=Counter" json:"Counter,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ApiAck) Reset()                    { *m = ApiAck{} }
func (m *ApiAck) String() string            { return proto.CompactTextString(m) }
func (*ApiAck) ProtoMessage()               {}
func (*ApiAck) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ApiAck) GetAckName() string {
	if m != nil && m.AckName != nil {
		return *m.AckName
	}
	return ""
}

func (m *ApiAck) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ApiAck) GetFlag() int32 {
	if m != nil && m.Flag != nil {
		return *m.Flag
	}
	return 0
}

func (m *ApiAck) GetCounter() int32 {
	if m != nil && m.Counter != nil {
		return *m.Counter
	}
	return 0
}

type TestMessage struct {
	Id               *int32  `protobuf:"varint,1,req,name=Id" json:"Id,omitempty"`
	Name             *string `protobuf:"bytes,2,req,name=Name" json:"Name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *TestMessage) Reset()                    { *m = TestMessage{} }
func (m *TestMessage) String() string            { return proto.CompactTextString(m) }
func (*TestMessage) ProtoMessage()               {}
func (*TestMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *TestMessage) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *TestMessage) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*ApiReq)(nil), "protocol.ApiReq")
	proto.RegisterType((*ApiAck)(nil), "protocol.ApiAck")
	proto.RegisterType((*TestMessage)(nil), "protocol.TestMessage")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4c, 0x2c, 0xc8, 0xd4,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0xc9, 0xf9, 0x39, 0x4a, 0x5e, 0x5c, 0x6c,
	0x8e, 0x05, 0x99, 0x41, 0xa9, 0x85, 0x42, 0x12, 0x5c, 0xec, 0x41, 0xa9, 0x85, 0x7e, 0x89, 0xb9,
	0xa9, 0x12, 0x8c, 0x0a, 0x4c, 0x1a, 0x9c, 0x41, 0x30, 0xae, 0x90, 0x10, 0x17, 0x8b, 0x4b, 0x62,
	0x49, 0xa2, 0x04, 0x93, 0x02, 0x93, 0x06, 0x4f, 0x10, 0x98, 0x0d, 0x12, 0x73, 0xcb, 0x49, 0x4c,
	0x97, 0x60, 0x56, 0x60, 0xd4, 0x60, 0x0d, 0x02, 0xb3, 0x95, 0x52, 0xc0, 0x66, 0x39, 0x26, 0x67,
	0x83, 0xcc, 0x72, 0x4c, 0xce, 0x46, 0x36, 0x0b, 0xca, 0x25, 0xd6, 0x2c, 0x90, 0x09, 0xce, 0xf9,
	0xa5, 0x79, 0x25, 0xa9, 0x45, 0x12, 0x2c, 0x60, 0x61, 0x18, 0x57, 0xc9, 0x90, 0x8b, 0x3b, 0x24,
	0xb5, 0xb8, 0xc4, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55, 0x88, 0x8f, 0x8b, 0xc9, 0x33, 0x05,
	0x6c, 0x0b, 0x6b, 0x10, 0x93, 0x67, 0x0a, 0xc8, 0x30, 0xb0, 0xbd, 0x4c, 0x60, 0x7b, 0xc1, 0x6c,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x88, 0x16, 0x57, 0xfa, 0x00, 0x00, 0x00,
}
